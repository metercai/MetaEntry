#!/bin/sh /etc/rc.common
START=90
STOP=10

USE_PROCD=1
EDGE_NAME="edge"
CONFIGFILE="/etc/conf/edge.conf"
EDGE_IFACE="n2n0"                          # Default Edge Interface Name (Require)
ETH_IFACE="eth0"                           # Default Ethernet Interface Name (Require)
NET_RANGE="10.0.1.0/24"                    # Default Edge Network Range (Consistent with HOST_ADDR, Require)

start_service() {
	procd_open_instance
	add_iptables_rules
  enable_ipv4_forward
  procd_set_param command $EDGE_NAME $CONFIGFILE
	procd_set_param file $CONFIGFILE
	procd_set_param respawn
	procd_close_instance
}

stop_service()
{
	service_stop
	killall $EDGE_NAME > /dev/null 2>&1
  remove_iptables_rules
#	disable_ipv4_forward
}

service_triggers()
{
	procd_add_reload_trigger "edge.conf"
}

is_running(){
	if [ "`ps -ef | pgrep $EDGE_NAME | wc -l`" -eq "0" ]; then
		echo "$EDGE_NAME not running"
	else
		echo "$EDGE_NAME is running, pid is `ps -ef | pgrep $EDGE_NAME | xargs`"
	fi
}

check_ipv4_forward(){
	if [ "$(cat /proc/sys/net/ipv4/ip_forward)" -eq "1" ]; then
		echo 1
	else
		echo 0
	fi
}

enable_ipv4_forward(){
	pre_checking_forward=$(check_ipv4_forward)
	if [ "$pre_checking_forward" -eq 0 ]; then
		echo 1 > /proc/sys/net/ipv4/ip_forward
	else
		echo "ipv4 forward already enabled on system..."
	fi
}

disable_ipv4_forward(){
	pre_checking_forward=$(check_ipv4_forward)
	if [ "$pre_checking_forward" -eq 1 ]; then
		echo 0 > /proc/sys/net/ipv4/ip_forward
	else
		echo "ipv4 forward already disabled on system..."
	fi
}

check_iptables_rule_exists(){
	if [ -z "$(iptables -vL | grep -i $EDGE_IFACE)" ]; then
		echo 1
	else
		echo 0
	fi
}

add_iptables_rules(){
	pre_existing_rule=$(check_iptables_rule_exists)
	if [ "$pre_existing_rule" -eq 1 ]; then
		iptables -A FORWARD -i $EDGE_IFACE -o $ETH_IFACE -j ACCEPT
		iptables -A FORWARD -i $ETH_IFACE -o $EDGE_IFACE -m state --state RELATED,ESTABLISHED -j ACCEPT
		iptables -t nat -A POSTROUTING -o $ETH_IFACE -s $NET_RANGE -j MASQUERADE
	else
		echo "iptables rules for edge already exists on system..."
	fi
}

remove_iptables_rules(){
	pre_existing_rule=$(check_iptables_rule_exists)
	if [ "$pre_existing_rule" -eq 0 ]; then
		iptables -D FORWARD -i $EDGE_IFACE -o $ETH_IFACE -j ACCEPT
		iptables -D FORWARD -i $ETH_IFACE -o $EDGE_IFACE -m state --state RELATED,ESTABLISHED -j ACCEPT
		iptables -t nat -D POSTROUTING -o $ETH_IFACE -s $NET_RANGE -j MASQUERADE
	else
		echo "iptables rules for edge already removed from system..."
	fi
}
